import{_ as o,W as l,X as i,Z as n,$ as a,a0 as s,a2 as t,C as r}from"./framework-3a0c4e99.js";const d={},p=n("h1",{id:"python3-解释器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python3-解释器","aria-hidden":"true"},"#"),a(" Python3 解释器")],-1),c=n("h1",{id:"python3-解释器-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python3-解释器-1","aria-hidden":"true"},"#"),a(" Python3 解释器")],-1),u=n("p",null,"Linux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 /usr/local/python3 目录中。",-1),h=n("p",null,"安装完成后，我们可以将路径 /usr/local/python3/bin 添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。",-1),v=n("blockquote",null,[n("p",null,"Python 解释器可不止一种哦，有 CPython、IPython、Jython、PyPy 等。")],-1),b=n("blockquote",null,[n("p",null,"顾名思义，CPython 就是用 C 语言开发的了，是官方标准实现，拥有良好的生态，所以应用也就最为广泛了。")],-1),m={href:"http://ipython.org/%EF%BC%89%E3%80%82",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.jython.org/%EF%BC%89%EF%BC%8C%E5%AE%83%E6%8A%8A",target:"_blank",rel:"noopener noreferrer"},y={href:"http://pypy.org/%EF%BC%89%EF%BC%8C%E4%BB%A5%E9%80%9F%E5%BA%A6%E5%BF%AB%E8%91%97%E7%A7%B0%E3%80%82",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/python3/bin/python3    <span class="token comment"># 设置环境变量</span>
$ python3 <span class="token parameter variable">--version</span>
Python <span class="token number">3.4</span>.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\\Python34 下:</p><div class="language-doc line-numbers-mode" data-ext="doc"><pre class="language-doc"><code>set path=%path%;C:\\python34
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="交互式编程" tabindex="-1"><a class="header-anchor" href="#交互式编程" aria-hidden="true">#</a> 交互式编程</h2><p>我们可以在命令提示符中输入&quot;Python&quot;命令来启动Python解释器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行以上命令后，出现如下窗口信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python3
Python <span class="token number">3.4</span>.0 <span class="token punctuation">(</span>default, Apr <span class="token number">11</span> <span class="token number">2014</span>, <span class="token number">13</span>:05:11<span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">4.8</span>.2<span class="token punctuation">]</span> on linux
Type <span class="token string">&quot;help&quot;</span>, <span class="token string">&quot;copyright&quot;</span>, <span class="token string">&quot;credits&quot;</span> or <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> <span class="token function">more</span> information.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 python 提示符中输入以下语句，然后按回车键查看运行效果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>print <span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令执行结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hello, Python<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> flag <span class="token operator">=</span> True
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> flag <span class="token builtin class-name">:</span>
<span class="token punctuation">..</span>.     print<span class="token punctuation">(</span><span class="token string">&quot;flag 条件为 True!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">..</span>. 
flag 条件为 True<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="脚本式编程" tabindex="-1"><a class="header-anchor" href="#脚本式编程" aria-hidden="true">#</a> 脚本式编程</h2><p>将如下代码拷贝至 hello.py文件中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>print <span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过以下命令执行该脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hello, Python<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /usr/bin/env python3.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改脚本权限，使其有执行权限，命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ chmod +x hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25),_=n("strong",null,"关于chmod命令请看：",-1),x={href:"http://wuanwanghao.top/archives/linuxchmod%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hello, Python<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function f(E,q){const e=r("ExternalLinkIcon");return l(),i("div",null,[p,c,u,h,v,b,n("blockquote",null,[n("p",null,[a("而 IPython 是在 CPython 的基础之上在交互式方面得到增强的解释器（"),n("a",m,[a("http://ipython.org/）。"),s(e)])])]),n("blockquote",null,[n("p",null,[a("Jython 是专为 Java 平台设计的 Python 解释器（"),n("a",g,[a("http://www.jython.org/），它把"),s(e)]),a(" Python 代码编译成 Java 字节码执行。")])]),n("blockquote",null,[n("p",null,[a("PyPy 是 Python 语言（2.7.13和3.5.3）的一种快速、兼容的替代实现（"),n("a",y,[a("http://pypy.org/），以速度快著称。"),s(e)])])]),k,n("p",null,[_,a(),n("a",x,[a("Linux chmod命令"),s(e)]),a(" 执行以下命令：")]),P])}const C=o(d,[["render",f],["__file","Python3 解释器.html.vue"]]);export{C as default};
