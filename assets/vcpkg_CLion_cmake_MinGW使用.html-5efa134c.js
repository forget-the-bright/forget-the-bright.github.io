import{_ as i,W as c,X as o,Z as a,$ as n,a0 as t,a2 as s,C as p}from"./framework-3a0c4e99.js";const l={},d=s('<h1 id="vcpkg-clion-cmake-mingw使用" tabindex="-1"><a class="header-anchor" href="#vcpkg-clion-cmake-mingw使用" aria-hidden="true">#</a> vcpkg+CLion+cmake+MinGW使用</h1><h4 id="vcpkg介绍" tabindex="-1"><a class="header-anchor" href="#vcpkg介绍" aria-hidden="true">#</a> vcpkg介绍</h4><p><code>vcpkg 是用于 C++ 的一种命令行包管理器。 它极大地简化了 Windows、Linux 和 macOS 上第三方库的购置与安装。 如果项目要使用第三方库，建议通过 vcpkg 来安装它们。 vcpkg 同时支持开源和专有库。 已测试 vcpkg Windows 目录中所有库与 Visual Studio 2015、Visual Studio 2017 及 Visual Studio 2019 的兼容性。 在 Windows 和 Linux/macOS 目录之间，vcpkg 现已支持超过 1900 个库。 C++ 社区正在不断向两个目录添加更多的库。</code></p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4>',4),r={href:"https://github.com/Microsoft/vcpkg%E3%80%82",target:"_blank",rel:"noopener noreferrer"},u=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/Microsoft/vcpkg.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 vcpkg 根目录中，运行 vcpkg 引导程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bootstrap-vcpkg.bat <span class="token punctuation">(</span>Windows<span class="token punctuation">)</span>
./bootstrap-vcpkg.sh（Linux、macOS）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后根据系统不同，添加到各自得环境变量里面 在 Linux 或 macOS 上，你可能需要在以下示例中使用 ./ 作为 vcpkg 命令的前缀。 请记得从 vcpkg 根目录运行这些命令。</p><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h4>`,5),v={href:"https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md",target:"_blank",rel:"noopener noreferrer"},g=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vcpkg</span> <span class="token function">install</span> jsoncpp:x64-mingw-static
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://local.wuanwanghao.top:9000/test/test/image-1673855329302.png" alt="image-1673855329302" loading="lazy"> CMake 使用 jsoncpp</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>find_package<span class="token punctuation">(</span>jsoncpp CONFIG REQUIRED<span class="token punctuation">)</span>
target_link_libraries<span class="token punctuation">(</span>main PRIVATE jsoncpp_object jsoncpp_static<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就是我们要在我们项目中 CMakeLists.txt 中填入的内容如下所示</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>cmake_minimum_required(VERSION 3.22)
set(VCPKG_TARGET_TRIPLET &quot;x64-mingw-static&quot; CACHE STRING &quot;&quot; FORCE)

project(main)

set(CMAKE_CXX_STANDARD 11)
find_package(jsoncpp CONFIG REQUIRED)

add_executable(main main.cpp)
target_link_libraries(main PRIVATE jsoncpp_object jsoncpp_static JsonCpp::JsonCpp)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的第二行 set(VCPKG_TARGET_TRIPLET &quot;x64-mingw-static&quot; CACHE STRING &quot;&quot; FORCE) 是设置 vcpkg 的 triplet</p><h4 id="clion-配置" tabindex="-1"><a class="header-anchor" href="#clion-配置" aria-hidden="true">#</a> Clion 配置</h4><p>在 CMake options 中填入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-DCMAKE_TOOLCHAIN_FILE</span><span class="token operator">=</span><span class="token operator">&lt;</span>你安装vcpkg的位置<span class="token operator">&gt;</span>/scripts/buildsystems/vcpkg.cmake

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://local.wuanwanghao.top:9000/test/test/image-1673855528935.png" alt="image-1673855528935" tabindex="0" loading="lazy"><figcaption>image-1673855528935</figcaption></figure><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>main.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;json/json.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Json<span class="token double-colon punctuation">::</span>Value root<span class="token punctuation">;</span>
    root<span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> root<span class="token punctuation">.</span><span class="token function">toStyledString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, World!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://local.wuanwanghao.top:9000/test/test/image-1673855622590.png" alt="image-1673855622590" tabindex="0" loading="lazy"><figcaption>image-1673855622590</figcaption></figure>`,14);function k(m,h){const e=p("ExternalLinkIcon");return c(),o("div",null,[d,a("p",null,[n("从 GitHub 克隆 vcpkg 存储库："),a("a",r,[n("https://github.com/Microsoft/vcpkg。"),t(e)]),n(" 可凭喜好下载到任意文件夹位置。 此位置的根是 vcpkg。 下载完成后，在命令行界面切换到该目录。")]),u,a("p",null,[a("a",v,[n("https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md"),t(e)]),n(" 安装 Jsoncpp 这里我们使用 vcpkg 安装 jsoncpp 并指定 vcpkg 的 triplet 为 mingw，用户可以通过执行 vcpkg help triplet 来查看 vcpkg 支持的所有 triplet")]),g])}const _=i(l,[["render",k],["__file","vcpkg_CLion_cmake_MinGW使用.html.vue"]]);export{_ as default};
