import{_ as e,W as t,X as a,a2 as n}from"./framework-3a0c4e99.js";const s={},d=n(`<h1 id="rm-特殊用法-删除文件夹指定格式的文件" tabindex="-1"><a class="header-anchor" href="#rm-特殊用法-删除文件夹指定格式的文件" aria-hidden="true">#</a> rm 特殊用法，删除文件夹指定格式的文件</h1><p>rm是我们在Linux下删除文件经常用到的命令，但是有时候我们目录下有很多个文件想要删除，偏偏却要保留其中1个或几个文件，那怎么办呢？很多新手朋友可能会采取一个一个文件删除的方法来操作，但是如果文件很多呢？删到啥时候啊~~</p><p>今天我们就来教大家使用rm命令删除文件的时候如何排除指定的文件（不删除指定文件）。首先我们来看一下平时我们是怎么使用rm命令的。</p><p><strong>1、删除单个文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm 1.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2、强制删除文件，无需确认</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf 1.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3、删除文件夹</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf mydir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4、删除目录下全部文件，包括文件夹</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5、删除全部文件，但保留1.txt</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf !(1.txt)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正常情况下是全部文件被删除了，只留下了1.txt，但是有时候我们的系统没配置好，可能会报错，例如下面这种：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root@abc:/home/# rm -rf !(1.txt)

-bash: !: event not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种情况是因为我们的系统没有开启通配符功能，我们执行下面的命令开启通配符功能先：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>shopt -s  extglob
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看通配符功能是否开启，on表示已经开启</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>shopt -s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们再次执行前面的命令就可以看到文件已经全部删除了，只保留了1.txt</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf !(1.txt)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>6、删除全部文件，保留1.txt和2.txt</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf !(1.txt|2.txt)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面我们说的都是直接用rm + !(叹号)来排除文件的，下面我们搞个高深一点的，用<strong>find + grep + xargs</strong>三个命令一起用</p><p><strong>7、删除全部文件，保留1.txt</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find * | grep -v 1.txt | xargs rm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们要特别注意grep的-v参数，-v参数表示反选，比如我们上面指定了-v 1.txt，即排除掉1.txt，选中其他全部文件。所以这样执行之后1.txt就被排除了</p><p><strong>8、删除全部文件，保留1.txt和2.txt</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find * | grep -v &#39;\\(1.txt\\|2.txt\\)&#39; | xargs rm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>9、删除文件中不包含_字符的文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find * | grep -v &#39;_&#39; | xargs rm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里要特别留意，括号()跟括号内的竖线|需要添加****进行转义，否则会报错</p>`,32),r=[d];function i(l,c){return t(),a("div",null,r)}const u=e(s,[["render",i],["__file","rm 特殊用法，删除文件夹指定格式的文件.html.vue"]]);export{u as default};
