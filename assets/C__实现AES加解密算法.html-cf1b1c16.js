const n=JSON.parse('{"key":"v-9a480fc2","path":"/halo/C__%E5%AE%9E%E7%8E%B0AES%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95.html","title":"C++实现AES加解密算法","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-10-14T00:00:00.000Z","category":["cpp"],"headerDepth":5,"description":"C++实现AES加解密算法 AES 头文件 CAES.h #pragma once class CAES { public: CAES(const char* key); virtual ~CAES(); /** * 加密 * @param in 输入加密数据 * @param inlen 输入加密数据长度 * @param outlen 输出加密后数据长度 * @param fill 如果不是16的整数倍，是否用0值补全。 true:用0值补全, false:用xor加密多余的数据 * @return 返回加密后数据 */ void* Encrypt(void* in, int inlen, int&amp; outlen, bool fill = false); /** * 解密 * @param in 输入解密数据 * @param inlen 输入解密数据长度 * @param outlen 输出解密后数据长度 * @return 返回解密后数据 */ void* Decrypt(void* in, int inlen, int&amp; outlen); private: // S 盒变换 unsigned char Sbox[256]; // 逆 S 盒变换 unsigned char InvSbox[256]; // 密钥 unsigned char w[11][4][4]; private: /** * 密钥扩展函数 - 对128位密钥进行扩展得到 w[11][4][4] * @param key 16位密钥 */ void KeyExpansion(const char* key); /** * 异或加解密 * @param in 加解密输入数据 * @param len 加解密输入数据长度 */ void Xor(unsigned char* in, int len); /** * 加密，传入的数组大小必须是16字节 * @param data 加密数据 */ void Encrypt(unsigned char* data); /** * 解密，传入的数组也必须是16字节 * @param data 解密数据 */ void Decrypt(unsigned char* data); /** * S 盒变换 * @param state 变换数据 */ void SubBytes(unsigned char state[][4]); /** * 行变换 * @param state 变换数据 */ void ShiftRows(unsigned char state[][4]); /** * 列变换 * @param state 变换数据 */ void MixColumns(unsigned char state[][4]); /** * 与扩展密钥的异或 * @param state 变换数据 */ void AddRoundKey(unsigned char state[][4], unsigned char k[][4]); /** * 逆 S 盒变换 * @param state 变换数据 */ void InvSubBytes(unsigned char state[][4]); /** * 逆行变换 * @param state 变换数据 */ void InvShiftRows(unsigned char state[][4]); /** * 逆列变换 * @param state 变换数据 */ void InvMixColumns(unsigned char state[][4]); };","head":[["meta",{"property":"og:url","content":"https://github.wuanwanghao.top/halo/C__%E5%AE%9E%E7%8E%B0AES%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"忘皓 博客"}],["meta",{"property":"og:title","content":"C++实现AES加解密算法"}],["meta",{"property":"og:description","content":"C++实现AES加解密算法 AES 头文件 CAES.h #pragma once class CAES { public: CAES(const char* key); virtual ~CAES(); /** * 加密 * @param in 输入加密数据 * @param inlen 输入加密数据长度 * @param outlen 输出加密后数据长度 * @param fill 如果不是16的整数倍，是否用0值补全。 true:用0值补全, false:用xor加密多余的数据 * @return 返回加密后数据 */ void* Encrypt(void* in, int inlen, int&amp; outlen, bool fill = false); /** * 解密 * @param in 输入解密数据 * @param inlen 输入解密数据长度 * @param outlen 输出解密后数据长度 * @return 返回解密后数据 */ void* Decrypt(void* in, int inlen, int&amp; outlen); private: // S 盒变换 unsigned char Sbox[256]; // 逆 S 盒变换 unsigned char InvSbox[256]; // 密钥 unsigned char w[11][4][4]; private: /** * 密钥扩展函数 - 对128位密钥进行扩展得到 w[11][4][4] * @param key 16位密钥 */ void KeyExpansion(const char* key); /** * 异或加解密 * @param in 加解密输入数据 * @param len 加解密输入数据长度 */ void Xor(unsigned char* in, int len); /** * 加密，传入的数组大小必须是16字节 * @param data 加密数据 */ void Encrypt(unsigned char* data); /** * 解密，传入的数组也必须是16字节 * @param data 解密数据 */ void Decrypt(unsigned char* data); /** * S 盒变换 * @param state 变换数据 */ void SubBytes(unsigned char state[][4]); /** * 行变换 * @param state 变换数据 */ void ShiftRows(unsigned char state[][4]); /** * 列变换 * @param state 变换数据 */ void MixColumns(unsigned char state[][4]); /** * 与扩展密钥的异或 * @param state 变换数据 */ void AddRoundKey(unsigned char state[][4], unsigned char k[][4]); /** * 逆 S 盒变换 * @param state 变换数据 */ void InvSubBytes(unsigned char state[][4]); /** * 逆行变换 * @param state 变换数据 */ void InvShiftRows(unsigned char state[][4]); /** * 逆列变换 * @param state 变换数据 */ void InvMixColumns(unsigned char state[][4]); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-17T07:23:00.000Z"}],["meta",{"property":"article:published_time","content":"2022-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-17T07:23:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++实现AES加解密算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-17T07:23:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":1,"title":"C++实现AES加解密算法","slug":"c-实现aes加解密算法","link":"#c-实现aes加解密算法","children":[]},{"level":1,"title":"AES 头文件","slug":"aes-头文件","link":"#aes-头文件","children":[{"level":2,"title":"CAES.h","slug":"caes-h","link":"#caes-h","children":[]}]},{"level":1,"title":"AES 实现文件","slug":"aes-实现文件","link":"#aes-实现文件","children":[{"level":2,"title":"CAES.cpp","slug":"caes-cpp","link":"#caes-cpp","children":[]}]},{"level":1,"title":"测试","slug":"测试","link":"#测试","children":[{"level":2,"title":"main.cpp","slug":"main-cpp","link":"#main-cpp","children":[]}]}],"git":{"createdTime":1681716180000,"updatedTime":1681716180000,"contributors":[{"name":"forget-the-bright","email":"kshelloworldwh@gmail.com","commits":1}]},"readingTime":{"minutes":12.55,"words":3766},"filePathRelative":"halo/C++实现AES加解密算法.md","localizedDate":"2022年10月14日","excerpt":"<h1> C++实现AES加解密算法</h1>\\n<h1> AES 头文件</h1>\\n<h2> CAES.h</h2>\\n<div class=\\"language-Cpp line-numbers-mode\\" data-ext=\\"Cpp\\"><pre class=\\"language-Cpp\\"><code>#pragma once\\n\\nclass CAES\\n{\\npublic:\\n    CAES(const char* key);\\n    virtual ~CAES();\\n\\n    /**\\n     * 加密\\n     * @param in 输入加密数据\\n     * @param inlen 输入加密数据长度\\n     * @param outlen 输出加密后数据长度\\n     * @param fill 如果不是16的整数倍，是否用0值补全。 true:用0值补全, false:用xor加密多余的数据\\n     * @return 返回加密后数据\\n     */\\n    void* Encrypt(void* in, int inlen, int&amp; outlen, bool fill = false); \\n\\n    /**\\n     * 解密\\n     * @param in 输入解密数据\\n     * @param inlen 输入解密数据长度\\n     * @param outlen 输出解密后数据长度\\n     * @return 返回解密后数据\\n     */\\n    void* Decrypt(void* in, int inlen, int&amp; outlen);\\n\\nprivate:\\n    // S 盒变换\\n    unsigned char Sbox[256];\\n    // 逆 S 盒变换\\n    unsigned char InvSbox[256];\\n    // 密钥\\n    unsigned char w[11][4][4];\\n\\nprivate:\\n    /**\\n     * 密钥扩展函数 - 对128位密钥进行扩展得到 w[11][4][4]\\n     * @param key 16位密钥\\n     */\\n    void KeyExpansion(const char* key);\\n\\n    /**\\n     * 异或加解密\\n     * @param in 加解密输入数据\\n     * @param len 加解密输入数据长度\\n     */\\n    void Xor(unsigned char* in, int len);\\n\\n    /**\\n     * 加密，传入的数组大小必须是16字节\\n     * @param data 加密数据\\n     */\\n    void Encrypt(unsigned char* data);\\n\\n    /**\\n     * 解密，传入的数组也必须是16字节\\n     * @param data 解密数据\\n     */\\n    void Decrypt(unsigned char* data);\\n\\n    /**\\n     * S 盒变换\\n     * @param state 变换数据\\n     */\\n    void SubBytes(unsigned char state[][4]);\\n\\n    /**\\n     * 行变换\\n     * @param state 变换数据\\n     */\\n    void ShiftRows(unsigned char state[][4]);\\n\\n    /**\\n     * 列变换\\n     * @param state 变换数据\\n     */\\n    void MixColumns(unsigned char state[][4]);\\n\\n    /**\\n     * 与扩展密钥的异或\\n     * @param state 变换数据\\n     */\\n    void AddRoundKey(unsigned char state[][4], unsigned char k[][4]);\\n\\n    /**\\n     * 逆 S 盒变换\\n     * @param state 变换数据\\n     */\\n    void InvSubBytes(unsigned char state[][4]);\\n\\n    /**\\n     * 逆行变换\\n     * @param state 变换数据\\n     */\\n    void InvShiftRows(unsigned char state[][4]);\\n\\n    /**\\n     * 逆列变换\\n     * @param state 变换数据\\n     */\\n    void InvMixColumns(unsigned char state[][4]);\\n};\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"forget-the-bright"},"autoDesc":true}');export{n as data};
