import{_ as a,W as d,X as n,Z as e,$ as o,a0 as r,a2 as c,C as p}from"./framework-3a0c4e99.js";const i={},t=c('<h1 id="linux-安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#linux-安装-docker-compose" aria-hidden="true">#</a> Linux 安装 docker-compose</h1><h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> docker-compose</h1><blockquote><p>docker compose 在 Docker 容器运用中具有很大的学习意义，docker compose 是一个整合发布应用的利器。而使用 docker compose 时，懂得如何编排 docker compose 配置文件是很重要的。</p></blockquote><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2>',4),l={href:"https://github.com/docker/compose/releases%E3%80%82",target:"_blank",rel:"noopener noreferrer"},m=c(`<h3 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一:</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#curl -L &quot;https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose </span>
<span class="token comment">#github太卡了网好和科学上网的同学可以使用</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://ghproxy.com/https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span>  <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose 

<span class="token comment">#curl -L https://get.daocloud.io/docker/compose/releases/download/1.12.0/docker-compose-\`uname -s\`-\`uname -m\` &gt; /usr/local/bin/docker-compose</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose

<span class="token function">docker-compose</span> version <span class="token comment"># 查看版本号，测试是否安装成功</span>
你可以通过修改URL中的版本，可以自定义您的需要的版本。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二:</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>　　<span class="token number">1</span>、安装python-pip

　　yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release

　　yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-pip

　　<span class="token number">2</span>、安装docker-compose

　　pip <span class="token function">install</span> <span class="token function">docker-compose</span>

　　待安装完成后，执行查询版本的命令确认安装成功

　　<span class="token function">docker-compose</span> version

　　spring.dubbo

　　application.name

　　registry.port
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数详解" tabindex="-1"><a class="header-anchor" href="#参数详解" aria-hidden="true">#</a> 参数详解</h2>`,5),h={href:"https://xie.infoq.cn/article/d666cde8f2131ff25ddf19ad8",target:"_blank",rel:"noopener noreferrer"},k=c('<h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="_1、docker-compose命令格式" tabindex="-1"><a class="header-anchor" href="#_1、docker-compose命令格式" aria-hidden="true">#</a> 1、Docker-Compose命令格式</h3><p>docker-compose [-f arg ...] [options] [COMMAND] [ARGS...] 命令选项如下： -f，–file FILE指定Compose模板文件，默认为docker-compose.yml，可以多次指定。 -p，–project-name NAME指定项目名称，默认将使用所在目录名称作为项目名。 -x-network-driver 使用Docker的可拔插网络后端特性（需要Docker 1.9+版本） -x-network-driver DRIVER指定网络后端的驱动，默认为bridge（需要Docker 1.9+版本） -verbose输出更多调试信息 -v，–version打印版本并退出</p><h3 id="_2、docker-compose-up" tabindex="-1"><a class="header-anchor" href="#_2、docker-compose-up" aria-hidden="true">#</a> 2、docker-compose up</h3><p><code>docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]</code> 选项包括： -d 在后台运行服务容器 –no-color 不使用颜色来区分不同的服务的控制输出 –no-deps 不启动服务所链接的容器 –force-recreate 强制重新创建容器，不能与–no-recreate同时使用 –no-recreate 如果容器已经存在，则不重新创建，不能与–force-recreate同时使用 –no-build 不自动构建缺失的服务镜像 –build 在启动容器前构建服务镜像 –abort-on-container-exit 停止所有容器，如果任何一个容器被停止，不能与-d同时使用 -t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒） –remove-orphans 删除服务中没有在compose文件中定义的容器 –scale SERVICE=NUM 设置服务运行容器的个数，将覆盖在compose中通过scale指定的参数 <code>docker-compose up</code> 启动所有服务 <code>docker-compose up -d</code> 在后台所有启动服务 -f 指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定。 <code>docker-compose -f docker-compose.yml up -d</code></p><h3 id="_3、docker-compose-ps" tabindex="-1"><a class="header-anchor" href="#_3、docker-compose-ps" aria-hidden="true">#</a> 3、docker-compose ps</h3><p><code>docker-compose ps [options] [SERVICE...]</code><code>docker-compose ps</code> 列出项目中目前的所有容器</p><h3 id="_4、docker-compose-stop" tabindex="-1"><a class="header-anchor" href="#_4、docker-compose-stop" aria-hidden="true">#</a> 4、docker-compose stop</h3><p><code>docker-compose stop [options] [SERVICE...]</code> 选项包括： -t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒） <code>docker-compose stop</code> 停止正在运行的容器，可以通过docker-compose start 再次启动</p><h3 id="_5、docker-compose-h" tabindex="-1"><a class="header-anchor" href="#_5、docker-compose-h" aria-hidden="true">#</a> 5、docker-compose -h</h3><p><code>docker-compose -h</code> 查看帮助</p><h3 id="_6、docker-compose-down" tabindex="-1"><a class="header-anchor" href="#_6、docker-compose-down" aria-hidden="true">#</a> 6、docker-compose down</h3><p><code>docker-compose down [options]</code> 停止和删除容器、网络、卷、镜像。 选项包括： –rmi type，删除镜像，类型必须是：all，删除compose文件中定义的所有镜像；local，删除镜像名为空的镜像 -v, –volumes，删除已经在compose文件中定义的和匿名的附在容器上的数据卷 –remove-orphans，删除服务中没有在compose中定义的容器 <code>docker-compose down</code> 停用移除所有容器以及网络相关</p><h3 id="_7、docker-compose-logs" tabindex="-1"><a class="header-anchor" href="#_7、docker-compose-logs" aria-hidden="true">#</a> 7、docker-compose logs</h3><p><code>docker-compose logs [options] [SERVICE...]</code> 查看服务容器的输出。默认情况下，docker-compose将对不同的服务输出使用不同的颜色来区分。可以通过–no-color来关闭颜色。 <code>docker-compose logs</code> 查看服务容器的输出</p><h3 id="_8、docker-compose-build" tabindex="-1"><a class="header-anchor" href="#_8、docker-compose-build" aria-hidden="true">#</a> 8、docker-compose build</h3><p><code>docker-compose build [options] [--build-arg key=val...] [SERVICE...]</code> 构建（重新构建）项目中的服务容器。 选项包括： –compress 通过gzip压缩构建上下环境 –force-rm 删除构建过程中的临时容器 –no-cache 构建镜像过程中不使用缓存 –pull 始终尝试通过拉取操作来获取更新版本的镜像 -m, –memory MEM为构建的容器设置内存大小 –build-arg key=val为服务设置build-time变量 服务容器一旦构建后，将会带上一个标记名。可以随时在项目目录下运行docker-compose build来重新构建服务</p><h3 id="_9、docker-compose-pull" tabindex="-1"><a class="header-anchor" href="#_9、docker-compose-pull" aria-hidden="true">#</a> 9、docker-compose pull</h3><p>docker-compose pull [options] [SERVICE...] 拉取服务依赖的镜像。 选项包括： –ignore-pull-failures，忽略拉取镜像过程中的错误 –parallel，多个镜像同时拉取 –quiet，拉取镜像过程中不打印进度信息 <code>docker-compose pull</code> 拉取服务依赖的镜像</p><h3 id="_10、docker-compose-restart" tabindex="-1"><a class="header-anchor" href="#_10、docker-compose-restart" aria-hidden="true">#</a> 10、docker-compose restart</h3><p><code>docker-compose restart [options] [SERVICE...]</code> 重启项目中的服务。 选项包括： -t, –timeout TIMEOUT，指定重启前停止容器的超时（默认为10秒） <code>docker-compose restart</code> 重启项目中的服务</p><h3 id="_11、docker-compose-rm" tabindex="-1"><a class="header-anchor" href="#_11、docker-compose-rm" aria-hidden="true">#</a> 11、docker-compose rm</h3><p><code>docker-compose rm [options] [SERVICE...]</code> 删除所有（停止状态的）服务容器。 选项包括： –f, –force，强制直接删除，包括非停止状态的容器 -v，删除容器所挂载的数据卷 <code>docker-compose rm</code> 删除所有（停止状态的）服务容器。推荐先执行docker-compose stop命令来停止容器。</p><h3 id="_12、docker-compose-start" tabindex="-1"><a class="header-anchor" href="#_12、docker-compose-start" aria-hidden="true">#</a> 12、docker-compose start</h3><p><code>docker-compose start [SERVICE...]</code><code>docker-compose start</code> 启动已经存在的服务容器。</p><h3 id="_13、docker-compose-run" tabindex="-1"><a class="header-anchor" href="#_13、docker-compose-run" aria-hidden="true">#</a> 13、docker-compose run</h3><p><code>docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code> 在指定服务上执行一个命令。 <code>docker-compose run ubuntu ping www.baidu.com</code> 在指定容器上执行一个ping命令。</p><h3 id="_14、docker-compose-scale" tabindex="-1"><a class="header-anchor" href="#_14、docker-compose-scale" aria-hidden="true">#</a> 14、docker-compose scale</h3><p><code>docker-compose scale web=3 db=2</code> 设置指定服务运行的容器个数。通过service=num的参数来设置数量</p><h3 id="_15、docker-compose-pause" tabindex="-1"><a class="header-anchor" href="#_15、docker-compose-pause" aria-hidden="true">#</a> 15、docker-compose pause</h3><p><code>docker-compose pause [SERVICE...]</code> 暂停一个服务容器</p><h3 id="_16、docker-compose-kill" tabindex="-1"><a class="header-anchor" href="#_16、docker-compose-kill" aria-hidden="true">#</a> 16、docker-compose kill</h3><p><code>docker-compose kill [options] [SERVICE...]</code> 通过发送SIGKILL信号来强制停止服务容器。 支持通过-s参数来指定发送的信号，例如通过如下指令发送SIGINT信号： <code>docker-compose kill -s SIGINT</code></p><h3 id="_17、dokcer-compose-config" tabindex="-1"><a class="header-anchor" href="#_17、dokcer-compose-config" aria-hidden="true">#</a> 17、dokcer-compose config</h3><p><code>docker-compose config [options]</code> 验证并查看compose文件配置。 选项包括： –resolve-image-digests 将镜像标签标记为摘要 -q, –quiet 只验证配置，不输出。 当配置正确时，不输出任何内容，当文件配置错误，输出错误信息 –services 打印服务名，一行一个 –volumes 打印数据卷名，一行一个</p><h3 id="_18、docker-compose-create" tabindex="-1"><a class="header-anchor" href="#_18、docker-compose-create" aria-hidden="true">#</a> 18、docker-compose create</h3><p><code>docker-compose create [options] [SERVICE...]</code> 为服务创建容器。 选项包括： –force-recreate：重新创建容器，即使配置和镜像没有改变，不兼容–no-recreate参数 –no-recreate：如果容器已经存在，不需要重新创建，不兼容–force-recreate参数 –no-build：不创建镜像，即使缺失 –build：创建容器前，生成镜像</p><h3 id="_19、docker-compose-exec" tabindex="-1"><a class="header-anchor" href="#_19、docker-compose-exec" aria-hidden="true">#</a> 19、docker-compose exec</h3><p><code>docker-compose exec [options] SERVICE COMMAND [ARGS...]</code> 选项包括： -d 分离模式，后台运行命令。 –privileged 获取特权。 –user USER 指定运行的用户。 -T 禁用分配TTY，默认docker-compose exec分配TTY。 –index=index，当一个服务拥有多个容器时，可通过该参数登陆到该服务下的任何服务，例如：docker-compose exec –index=1 web /bin/bash ，web服务中包含多个容器</p><h3 id="_20、docker-compose-port" tabindex="-1"><a class="header-anchor" href="#_20、docker-compose-port" aria-hidden="true">#</a> 20、docker-compose port</h3><p><code>docker-compose port [options] SERVICE PRIVATE_PORT</code> 显示某个容器端口所映射的公共端口。 选项包括： –protocol=proto，指定端口协议，TCP（默认值）或者UDP –index=index，如果同意服务存在多个容器，指定命令对象容器的序号（默认为1）</p><h3 id="_21、docker-compose-push" tabindex="-1"><a class="header-anchor" href="#_21、docker-compose-push" aria-hidden="true">#</a> 21、docker-compose push</h3><p><code>docker-compose push [options] [SERVICE...]</code> 推送服务依的镜像。 选项包括： –ignore-push-failures 忽略推送镜像过程中的错误</p><h3 id="_22、docker-compose-stop" tabindex="-1"><a class="header-anchor" href="#_22、docker-compose-stop" aria-hidden="true">#</a> 22、docker-compose stop</h3><p><code>docker-compose stop [options] [SERVICE...]</code> 显示各个容器运行的进程情况。</p><h3 id="_23、docker-compose-unpause" tabindex="-1"><a class="header-anchor" href="#_23、docker-compose-unpause" aria-hidden="true">#</a> 23、docker-compose unpause</h3><p><code>docker-compose unpause [SERVICE...]</code> 恢复处于暂停状态中的服务。</p><h3 id="_24、docker-compose-version" tabindex="-1"><a class="header-anchor" href="#_24、docker-compose-version" aria-hidden="true">#</a> 24、docker-compose version</h3><p><code>docker-compose version</code> 打印版本信息。</p>',49);function u(b,v){const s=p("ExternalLinkIcon");return d(),n("div",null,[t,e("blockquote",null,[e("p",null,[o("Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址："),e("a",l,[o("https://github.com/docker/compose/releases。"),r(s)])])]),m,e("p",null,[e("a",h,[o("docker 编排参数详解（docker-compose.yml 配置文件编写）"),r(s)])]),k])}const f=a(i,[["render",u],["__file","Linux 安装 docker-compose.html.vue"]]);export{f as default};
