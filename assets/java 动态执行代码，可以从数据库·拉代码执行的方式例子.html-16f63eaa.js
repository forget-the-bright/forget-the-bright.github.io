const n=JSON.parse('{"key":"v-31786821","path":"/halo/java%20%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%C2%B7%E6%8B%89%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BE%8B%E5%AD%90.html","title":"java 动态执行代码，可以从数据库·拉代码执行的方式例子","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-02-17T00:00:00.000Z","category":["Java"],"headerDepth":5,"description":"java 动态执行代码，可以从数据库·拉代码执行的方式例子 DynamicJavaCompilerUtil.java import javax.tools.JavaCompiler; import javax.tools.ToolProvider; import java.io.File; import java.io.IOException; import java.io.RandomAccessFile; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.net.URL; import java.net.URLClassLoader; import java.util.Arrays; import java.util.stream.Collectors; public class DynamicJavaCompilerUtil { static String tmpPath = \\"./tmp\\"; public static void Test() throws IOException { String code = new String(\\"public class T4{ \\" + \\"static void print(String a){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\"+ a);\\" + \\"}\\" + \\"static void print(){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\");\\" + \\"}\\" + \\"static void print(Integer a,String b){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\"+a+b);\\" + \\"}\\" + \\"}\\"); CompilerToRun(code, \\"T4\\", \\"print\\", 1, \\" 2\\"); } /* * @param Code 代码字符串 * @param ClassName 类名 * @param MethodName 需要执行的方法名 * @param MethodParam 需要执行的方法的参数 */ public static void CompilerToRun(String Code, String ClassName, String MethodName, Object... MethodParam) throws IOException { isDirExists(new File(tmpPath)); File file = new File(tmpPath + \\"/\\" + ClassName + \\".java\\"); RandomAccessFile accessFile = null; try { accessFile = new RandomAccessFile(file, \\"rw\\"); accessFile.write(Code.getBytes()); JavaCompiler compiler = ToolProvider.getSystemJavaCompiler(); //调用动态编译的工具 int result = compiler.run(null, null, null, tmpPath + \\"/\\" + ClassName + \\".java\\"); //进行动态编译，并返回结果 if (result != 0) { throw new RuntimeException(\\"编译失败\\"); } //通过反射方法动态执行 //1、首先构建文件的目录url地址， URL[] urls = new URL[]{new URL(\\"file:\\" + tmpPath + \\"/\\")}; //2、使用URLClassLoader对象的loadClass方法加载对应类 URLClassLoader loder = new URLClassLoader(urls); //3、获取所加载类的方法 Class clazz = loder.loadClass(ClassName); Class[] MethodParamClass = Arrays.asList(MethodParam).stream().map(Object::getClass).collect(Collectors.toList()).toArray(new Class[]{}); // 4、传入方法所需的参数通过invoke运行方法 Method method = clazz.getDeclaredMethod(MethodName, MethodParamClass); method.setAccessible(true); method.invoke(null, MethodParam); //当类型为String[]时，需要(Object)new String[] {}初始化 } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } catch (InvocationTargetException e) { throw new RuntimeException(e); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } catch (IllegalAccessException e) { throw new RuntimeException(e); } finally { accessFile.close(); deleteFile(new File(tmpPath)); } } private static void isDirExists(File file) { if (!file.exists()) { file.mkdir(); } } private static Boolean deleteFile(File file) { //判断文件不为null或文件目录存在 if (file == null || !file.exists()) { System.out.println(\\"文件删除失败,请检查文件是否存在以及文件路径是否正确\\"); return false; } //获取目录下子文件 File[] files = file.listFiles(); //遍历该目录下的文件对象 for (File f : files) { //判断子目录是否存在子目录,如果是文件则删除 if (f.isDirectory()) { //递归删除目录下的文件 deleteFile(f); } else { //文件删除 f.delete(); //打印文件名 System.out.println(\\"文件名：\\" + f.getName()); } } //文件夹删除 file.delete(); System.out.println(\\"目录名：\\" + file.getName()); return true; } }","head":[["meta",{"property":"og:url","content":"https://github.wuanwanghao.top/halo/java%20%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%C2%B7%E6%8B%89%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BE%8B%E5%AD%90.html"}],["meta",{"property":"og:site_name","content":"忘皓 博客"}],["meta",{"property":"og:title","content":"java 动态执行代码，可以从数据库·拉代码执行的方式例子"}],["meta",{"property":"og:description","content":"java 动态执行代码，可以从数据库·拉代码执行的方式例子 DynamicJavaCompilerUtil.java import javax.tools.JavaCompiler; import javax.tools.ToolProvider; import java.io.File; import java.io.IOException; import java.io.RandomAccessFile; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.net.URL; import java.net.URLClassLoader; import java.util.Arrays; import java.util.stream.Collectors; public class DynamicJavaCompilerUtil { static String tmpPath = \\"./tmp\\"; public static void Test() throws IOException { String code = new String(\\"public class T4{ \\" + \\"static void print(String a){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\"+ a);\\" + \\"}\\" + \\"static void print(){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\");\\" + \\"}\\" + \\"static void print(Integer a,String b){ \\" + \\"System.out.println(\\\\\\"Hello world! \\\\\\"+a+b);\\" + \\"}\\" + \\"}\\"); CompilerToRun(code, \\"T4\\", \\"print\\", 1, \\" 2\\"); } /* * @param Code 代码字符串 * @param ClassName 类名 * @param MethodName 需要执行的方法名 * @param MethodParam 需要执行的方法的参数 */ public static void CompilerToRun(String Code, String ClassName, String MethodName, Object... MethodParam) throws IOException { isDirExists(new File(tmpPath)); File file = new File(tmpPath + \\"/\\" + ClassName + \\".java\\"); RandomAccessFile accessFile = null; try { accessFile = new RandomAccessFile(file, \\"rw\\"); accessFile.write(Code.getBytes()); JavaCompiler compiler = ToolProvider.getSystemJavaCompiler(); //调用动态编译的工具 int result = compiler.run(null, null, null, tmpPath + \\"/\\" + ClassName + \\".java\\"); //进行动态编译，并返回结果 if (result != 0) { throw new RuntimeException(\\"编译失败\\"); } //通过反射方法动态执行 //1、首先构建文件的目录url地址， URL[] urls = new URL[]{new URL(\\"file:\\" + tmpPath + \\"/\\")}; //2、使用URLClassLoader对象的loadClass方法加载对应类 URLClassLoader loder = new URLClassLoader(urls); //3、获取所加载类的方法 Class clazz = loder.loadClass(ClassName); Class[] MethodParamClass = Arrays.asList(MethodParam).stream().map(Object::getClass).collect(Collectors.toList()).toArray(new Class[]{}); // 4、传入方法所需的参数通过invoke运行方法 Method method = clazz.getDeclaredMethod(MethodName, MethodParamClass); method.setAccessible(true); method.invoke(null, MethodParam); //当类型为String[]时，需要(Object)new String[] {}初始化 } catch (IOException e) { throw new RuntimeException(e); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } catch (InvocationTargetException e) { throw new RuntimeException(e); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } catch (IllegalAccessException e) { throw new RuntimeException(e); } finally { accessFile.close(); deleteFile(new File(tmpPath)); } } private static void isDirExists(File file) { if (!file.exists()) { file.mkdir(); } } private static Boolean deleteFile(File file) { //判断文件不为null或文件目录存在 if (file == null || !file.exists()) { System.out.println(\\"文件删除失败,请检查文件是否存在以及文件路径是否正确\\"); return false; } //获取目录下子文件 File[] files = file.listFiles(); //遍历该目录下的文件对象 for (File f : files) { //判断子目录是否存在子目录,如果是文件则删除 if (f.isDirectory()) { //递归删除目录下的文件 deleteFile(f); } else { //文件删除 f.delete(); //打印文件名 System.out.println(\\"文件名：\\" + f.getName()); } } //文件夹删除 file.delete(); System.out.println(\\"目录名：\\" + file.getName()); return true; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-17T07:23:00.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-17T07:23:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 动态执行代码，可以从数据库·拉代码执行的方式例子\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-17T07:23:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":1,"title":"java 动态执行代码，可以从数据库·拉代码执行的方式例子","slug":"java-动态执行代码-可以从数据库·拉代码执行的方式例子","link":"#java-动态执行代码-可以从数据库·拉代码执行的方式例子","children":[]}],"git":{"createdTime":1681716180000,"updatedTime":1681716180000,"contributors":[{"name":"forget-the-bright","email":"kshelloworldwh@gmail.com","commits":1}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"halo/java 动态执行代码，可以从数据库·拉代码执行的方式例子.md","localizedDate":"2023年2月17日","excerpt":"<h1> java 动态执行代码，可以从数据库·拉代码执行的方式例子</h1>\\n<p><code>DynamicJavaCompilerUtil.java</code></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>tools<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">JavaCompiler</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>tools<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ToolProvider</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">File</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">IOException</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">RandomAccessFile</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">InvocationTargetException</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Method</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>net<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">URL</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>net<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">URLClassLoader</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Arrays</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>stream<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Collectors</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DynamicJavaCompilerUtil</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> tmpPath <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"./tmp\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> code <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"public class T4{  \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"static void print(String a){ \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"System.out.println(\\\\\\"Hello world! \\\\\\"+ a);\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"}\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"static void print(){ \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"System.out.println(\\\\\\"Hello world! \\\\\\");\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"}\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"static void print(Integer a,String b){ \\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"System.out.println(\\\\\\"Hello world! \\\\\\"+a+b);\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"}\\"</span> <span class=\\"token operator\\">+</span>\\n                <span class=\\"token string\\">\\"}\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">CompilerToRun</span><span class=\\"token punctuation\\">(</span>code<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"T4\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"print\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"  2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">/*\\n     * @param Code 代码字符串\\n     * @param ClassName 类名\\n     * @param MethodName  需要执行的方法名\\n     * @param MethodParam  需要执行的方法的参数\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token class-name\\">CompilerToRun</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> <span class=\\"token class-name\\">Code</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> <span class=\\"token class-name\\">ClassName</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> <span class=\\"token class-name\\">MethodName</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token class-name\\">MethodParam</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">isDirExists</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>tmpPath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">File</span> file <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>tmpPath <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">ClassName</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\".java\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">RandomAccessFile</span> accessFile <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            accessFile <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RandomAccessFile</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"rw\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            accessFile<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Code</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">JavaCompiler</span> compiler <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ToolProvider</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSystemJavaCompiler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//调用动态编译的工具</span>\\n            <span class=\\"token keyword\\">int</span> result <span class=\\"token operator\\">=</span> compiler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> tmpPath <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">ClassName</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\".java\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//进行动态编译，并返回结果</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>result <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"编译失败\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//通过反射方法动态执行</span>\\n            <span class=\\"token comment\\">//1、首先构建文件的目录url地址，</span>\\n            <span class=\\"token constant\\">URL</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> urls <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">URL</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">URL</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"file:\\"</span> <span class=\\"token operator\\">+</span> tmpPath <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">//2、使用URLClassLoader对象的loadClass方法加载对应类</span>\\n            <span class=\\"token class-name\\">URLClassLoader</span> loder <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">URLClassLoader</span><span class=\\"token punctuation\\">(</span>urls<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">//3、获取所加载类的方法</span>\\n            <span class=\\"token class-name\\">Class</span> clazz <span class=\\"token operator\\">=</span> loder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">loadClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ClassName</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token class-name\\">MethodParamClass</span> <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">asList</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">MethodParam</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span><span class=\\"token operator\\">::</span><span class=\\"token function\\">getClass</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">collect</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Collectors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 4、传入方法所需的参数通过invoke运行方法</span>\\n            <span class=\\"token class-name\\">Method</span> method <span class=\\"token operator\\">=</span> clazz<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getDeclaredMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">MethodName</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">MethodParamClass</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setAccessible</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">MethodParam</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//当类型为String[]时，需要(Object)new String[] {}初始化</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ClassNotFoundException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InvocationTargetException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NoSuchMethodException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IllegalAccessException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n            accessFile<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">deleteFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>tmpPath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">isDirExists</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">File</span> file<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mkdir</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Boolean</span> <span class=\\"token function\\">deleteFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">File</span> file<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//判断文件不为null或文件目录存在</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>file <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> <span class=\\"token operator\\">!</span>file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件删除失败,请检查文件是否存在以及文件路径是否正确\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//获取目录下子文件</span>\\n        <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> files <span class=\\"token operator\\">=</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">listFiles</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//遍历该目录下的文件对象</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">File</span> f <span class=\\"token operator\\">:</span> files<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//判断子目录是否存在子目录,如果是文件则删除</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isDirectory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//递归删除目录下的文件</span>\\n                <span class=\\"token function\\">deleteFile</span><span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//文件删除</span>\\n                f<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//打印文件名</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件名：\\"</span> <span class=\\"token operator\\">+</span> f<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//文件夹删除</span>\\n        file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"目录名：\\"</span> <span class=\\"token operator\\">+</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"forget-the-bright"},"autoDesc":true}');export{n as data};
