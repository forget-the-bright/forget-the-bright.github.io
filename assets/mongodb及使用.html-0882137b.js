import{_ as o,W as d,X as i,Z as a,$ as n,a0 as t,a2 as e,C as r}from"./framework-3a0c4e99.js";const l={},c=e(`<h1 id="mongodb及使用" tabindex="-1"><a class="header-anchor" href="#mongodb及使用" aria-hidden="true">#</a> mongodb及使用</h1><h2 id="一、mongodb是什么" tabindex="-1"><a class="header-anchor" href="#一、mongodb是什么" aria-hidden="true">#</a> 一、mongoDB是什么？</h2><p>MongoDB是一个NoSQL的非关系型数据库 ，支持海量数据存储，高性能的读写。</p><h3 id="_1-mongo的体系结构" tabindex="-1"><a class="header-anchor" href="#_1-mongo的体系结构" aria-hidden="true">#</a> 1. mongo的体系结构</h3><p><img src="https://local.wuanwanghao.top:9000/test/test/image-1678084882505.png" alt="image-1678084882505" loading="lazy"> mongo中的集合相当于mysql中表的概念； mongo中的文档相当于mysql中行的概念； mongo中的域相当于mysql中字段/列的概念；</p><h3 id="_2-mongodb的特点-或使用场景" tabindex="-1"><a class="header-anchor" href="#_2-mongodb的特点-或使用场景" aria-hidden="true">#</a> 2. mongoDB的特点(或使用场景)</h3><p>支持存储海量数据；(例如：直播中的打赏数据)； 支持频繁的数据读写；（例如：游戏道具）； 数据安全性不高，存在数据误差(丢失数据)； mongoDB不支持多表操作，不支持事务； mongoDB使用Bson存储格式，支持动态字段管理；</p><h3 id="_3-mongodb与mysql、redis对比" tabindex="-1"><a class="header-anchor" href="#_3-mongodb与mysql、redis对比" aria-hidden="true">#</a> 3. mongoDB与mysql、redis对比</h3><p>与redis对比</p><ol><li>redis纯内存数据库，内存不足时触发淘汰策略，mongoDB使用内存加磁盘的存储策略具有高扩展性；</li><li>mongoDB使用Bson存储格式，支持动态字段管理方便扩展； 与mysql对比</li><li>mongoDB不支持多表操作，不支持事务；</li><li>mongoDB使用Bson存储格式，支持动态字段管理； 查询效率对比 Redis &gt; MongoDB &gt; MySQL</li></ol><h3 id="_4-mongodb存储原理" tabindex="-1"><a class="header-anchor" href="#_4-mongodb存储原理" aria-hidden="true">#</a> 4. mongoDB存储原理</h3><p><img src="https://local.wuanwanghao.top:9000/test/test/image-1678084900902.png" alt="image-1678084900902" loading="lazy"> mongoDb采用内存加磁盘的方式存储数据； mongoDb支持数据分片，当单一的服务器中磁盘不够用的时候，还可以串联其他服务器； 客户端的请求到达内存时，先在日志中记录下操作记录，然后再去操作内存； 内存中的日志每10ms向磁盘中的日志进行同步一次，数据则每分钟同步一次； 客户端先去内存中查询数据，内存中没有再去查询磁盘； 当客户端写入的时候，会先写入到内存中，内存中写入后请求直接返回，内存中的数据会根据同步策略同步到磁盘； 如果机器宕机，在重启服务的时候会解析磁盘中的日志和磁盘中的数据进行对比，将未入到磁盘中的数据写入磁盘，但可能会丢失10ms的数据；</p><h2 id="二、使用docker安装mongo" tabindex="-1"><a class="header-anchor" href="#二、使用docker安装mongo" aria-hidden="true">#</a> 二、使用docker安装mongo</h2><h3 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h3><p>1.拉取mongo镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mongo:4.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.创建mongo数据持久化目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /docker_volume/mongodb/data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.运行容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mongo <span class="token parameter variable">-v</span> /docker_volume/mongodb/data:/data/db <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 mongo:4.4 <span class="token parameter variable">--auth</span> <span class="token parameter variable">--bind_ip</span> <span class="token number">0.0</span>.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),p={href:"https://www.mongodb.com/docs/manual/reference/program/mongod/#cmdoption-mongod-auth",target:"_blank",rel:"noopener noreferrer"},u=e(`<h3 id="_2-创建用户" tabindex="-1"><a class="header-anchor" href="#_2-创建用户" aria-hidden="true">#</a> 2.创建用户</h3><p>登录mongo容器，并进入到【admin】数据库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it mongo mongo admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个用户，mongo 默认没有用户 db.createUser({ user:&#39;root&#39;,pwd:&#39;123456&#39;,roles:[ { role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;},&#39;readWriteAnyDatabase&#39;]});</p><p><code>【user:‘root’ 】：设置用户名为root</code><code>【pwd:‘123456’】：设置密码为123456</code><code>【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</code><code>【db: ‘admin’】：可操作的数据库</code><code>【‘readWriteAnyDatabase’】：赋予用户读写权限 </code></p><p>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</p><h3 id="_3-连接、测试" tabindex="-1"><a class="header-anchor" href="#_3-连接、测试" aria-hidden="true">#</a> 3. 连接、测试</h3><p>连接mongo数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.auth<span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span>, <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试数据库 创建集合</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.createCollection<span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试数据库，插入一条语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.user.insert<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;zhangsan&quot;</span>,<span class="token string">&quot;age&quot;</span>:18<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试数据库，查询刚才插入的语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.user.find<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-修改密码" tabindex="-1"><a class="header-anchor" href="#_4-修改密码" aria-hidden="true">#</a> 4.修改密码</h3><h4 id="_1、首先通过以下命令登录mongodb数据库。" tabindex="-1"><a class="header-anchor" href="#_1、首先通过以下命令登录mongodb数据库。" aria-hidden="true">#</a> 1、首先通过以下命令登录mongodb数据库。</h4><p>show dbs 查看数据库</p><p>use dbname 进入数据库</p><p>show users 查看当前数据库用户权限据。</p><h4 id="_2、使用以下方法修改密码即可。" tabindex="-1"><a class="header-anchor" href="#_2、使用以下方法修改密码即可。" aria-hidden="true">#</a> 2、使用以下方法修改密码即可。</h4><p>方法1：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.changeUserPassword<span class="token punctuation">(</span><span class="token string">&quot;usertest&quot;</span>,<span class="token string">&quot;changepass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法2：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.updateUser<span class="token punctuation">(</span><span class="token string">&quot;usertest&quot;</span>,<span class="token punctuation">{</span>pwd:<span class="token string">&quot;changepass1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25);function m(h,g){const s=r("ExternalLinkIcon");return d(),i("div",null,[c,a("p",null,[n("–auth：需要密码才能访问容器服务 --bind_ip 0.0.0.0 监听从所有ip请求来的流量 相关命令行参数 请参照官方文档 "),a("a",p,[n("mongod"),t(s)])]),u])}const v=o(l,[["render",m],["__file","mongodb及使用.html.vue"]]);export{v as default};
