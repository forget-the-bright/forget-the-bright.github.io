import{_ as p,W as t,X as o,Z as n,$ as c,a0 as e,a2 as s,C as u}from"./framework-3a0c4e99.js";const l={},i=s(`<h1 id="rust-文件加解密" tabindex="-1"><a class="header-anchor" href="#rust-文件加解密" aria-hidden="true">#</a> Rust 文件加解密</h1><p><code>Cargo.toml</code></p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">aes</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.7.5&quot;</span>
<span class="token key property">block-modes</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.8.1&quot;</span>
<span class="token key property">hex-literal</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.1&quot;</span>
<span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.8.4&quot;</span>
<span class="token key property">bytebuffer</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.1&quot;</span>
<span class="token key property">base64</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.13.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),k={href:"http://main.rs",target:"_blank",rel:"noopener noreferrer"},r=s(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">aes<span class="token punctuation">::</span></span><span class="token class-name">Aes256</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">block_modes<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">BlockMode</span><span class="token punctuation">,</span> <span class="token class-name">Cbc</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">block_modes<span class="token punctuation">::</span>block_padding<span class="token punctuation">::</span></span><span class="token class-name">Pkcs7</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span>seq<span class="token punctuation">::</span></span><span class="token class-name">SliceRandom</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token type-definition class-name">AesCbc</span> <span class="token operator">=</span> <span class="token class-name">Cbc</span><span class="token operator">&lt;</span><span class="token class-name">Aes256</span><span class="token punctuation">,</span> <span class="token class-name">Pkcs7</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">BASE_STR</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">KEY</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;01234567012345670123456701234567&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">gen_ascii_chars</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span>
            <span class="token constant">BASE_STR</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">choose_multiple</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">,</span> size<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> iv_str <span class="token operator">=</span> <span class="token function">gen_ascii_chars</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> iv <span class="token operator">=</span> iv_str<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cipher <span class="token operator">=</span> <span class="token class-name">AesCbc</span><span class="token punctuation">::</span><span class="token function">new_from_slices</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ciphertext <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">encrypt_vec</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token namespace">bytebuffer<span class="token punctuation">::</span></span><span class="token class-name">ByteBuffer</span><span class="token punctuation">::</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer<span class="token punctuation">.</span><span class="token function">write_bytes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">base64<span class="token punctuation">::</span></span><span class="token function">encode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> <span class="token namespace">base64<span class="token punctuation">::</span></span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cipher <span class="token operator">=</span> <span class="token class-name">AesCbc</span><span class="token punctuation">::</span><span class="token function">new_from_slices</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token function">decrypt_vec</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bytes<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">decryptToByte</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> <span class="token namespace">base64<span class="token punctuation">::</span></span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cipher <span class="token operator">=</span> <span class="token class-name">AesCbc</span><span class="token punctuation">::</span><span class="token function">new_from_slices</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cipher<span class="token punctuation">.</span><span class="token function">decrypt_vec</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bytes<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">encodefile</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>encodePath<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//let plaintext = &quot;hello worldsssss&quot;;</span>
    <span class="token keyword">let</span> plaintext <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> classstr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> enc <span class="token operator">=</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// println!(&quot;{}&quot;, enc);</span>
    <span class="token keyword">let</span> dec <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>enc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>classstr<span class="token punctuation">,</span> dec<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// println!(&quot;{}&quot;, dec);</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>encodePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>enc<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">decodefile</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>decodePath<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> plaintext <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> classstr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//  let dec = decrypt(key, &amp;classstr);</span>
    <span class="token keyword">let</span> decodeBytes <span class="token operator">=</span> <span class="token function">decryptToByte</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>classstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>decodePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>decodeBytes<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">encodefile</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\61778\\\\Desktop\\\\HelloWorld.class&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C:\\\\Users\\\\61778\\\\Desktop\\\\test1\\\\HelloWorldDE.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">decodefile</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\61778\\\\Desktop\\\\test1\\\\HelloWorldDE.class&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C:\\\\Users\\\\61778\\\\Desktop\\\\test1\\\\HelloWorld.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const a=u("ExternalLinkIcon");return t(),o("div",null,[i,n("p",null,[n("a",k,[c("main.rs"),e(a)])]),r])}const b=p(l,[["render",d],["__file","Rust 文件加解密.html.vue"]]);export{b as default};
